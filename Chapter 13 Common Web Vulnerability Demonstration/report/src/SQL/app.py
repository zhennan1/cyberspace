from flask import Flask, render_template, request, session, redirect, url_for, escape
import sqlite3
import html

# 连接数据库
def connect_db():
    db = sqlite3.connect("test.db")
    db.cursor().execute(
        "CREATE TABLE IF NOT EXISTS comments "
        "(id INTEGER PRIMARY KEY, "
        "comment TEXT)"
    )
    db.cursor().execute(
        "CREATE TABLE IF NOT EXISTS users "
        "(id INTEGER PRIMARY KEY, "
        "username TEXT, "
        "password TEXT)"
    )
    db.commit()
    return db

# 添加评论
def add_comment(comment):
    db = connect_db()
    db.cursor().execute("INSERT INTO comments (comment) " "VALUES (?)", (comment,))
    db.commit()

# 获取评论
def get_comments(search_query=None):
    db = connect_db()
    results = []
    get_all_query = (f"SELECT comment FROM comments WHERE comment LIKE '%{search_query}%'")
    for (comment,) in db.cursor().execute(get_all_query).fetchall():
        results.append(comment)
    return results

# 验证用户登录
def authenticate(username, password):
    db = connect_db()

    # SQL注入漏洞，将参数直接拼接进查询语句中

    # query = "SELECT * FROM users WHERE username = '{}' AND password = '{}'".format(username, password)
    # result = db.cursor().execute(query).fetchone()

    # SQL注入防御：参数化查询接口
    
    query = "SELECT username, password FROM users WHERE username = ? AND password = ?"
    result = db.cursor().execute(query, (username, password)).fetchone()

    if result is not None:
        return True
    return False

def create_user(username, password):
    db = connect_db()
    db.cursor().execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
    db.commit()

# 调用 create_user 函数创建用户
create_user("admin", "password")

# 启动flask
app = Flask(__name__)
app.secret_key = 'supersecretkey'

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        # 对输入进行转义处理
        comment = html.escape(request.form['comment'])  
        add_comment(comment)

    # 对搜索查询进行转义处理
    search_query = request.args.get('q')
    if search_query is None:
        search_query = ""
    else:
        search_query = html.escape(search_query)

    comments = get_comments(search_query)

    return render_template('index.html',
                           comments=comments,
                           search_query=search_query)

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]
        if authenticate(username, password):
            session["username"] = username
            return redirect(url_for("index"))
        else:
            error = "登录失败，请检查用户名和密码。"
            return render_template("login.html", error=error)
    return render_template("login.html")

@app.route("/logout")
def logout():
    session.pop("username", None)
    return redirect(url_for("login"))


if __name__ == "__main__":
    app.run()
